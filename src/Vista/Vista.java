/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import static Vista.Vista.slidX;
import java.awt.Cursor;
import java.awt.Point;
import java.awt.Toolkit;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;

/**
 *
 * @author Ricardo Cortez
 */
public class Vista extends javax.swing.JFrame {

    /**
     * Creates new form Vista
     */
    boolean var=true;
    Color color = Color.BLACK;
    int grosor=2;
    int borrarx,borrary;
    int one = 0,tf=0,tf2=0;
    int ParabolaX1;
    int ParabolaY1;
    int elipseX1, elipseY1;
    int elipseX2;
    int elipseY2;
    static int slidX = 0, slidY = 0, yy=0,xx=0;
    float DeltaX, DeltaY, K;
    int Pasos;
    float Xincremento = 0;
    float Yincremento = 0;
    float X = 0;
    float Y = 0;
    int xp = 0, yp = 0;
    int a, b;
    int h, k, p = 5, op = 0, oa = 0, lim, limX;
    int ejecucion = 0;
    int caja1 = 0, caja2 = 0, mensaje = 0,bandera=0;
    boolean estadoLimpiar = false;
    String radio1, radio2, figura = "";

    public Vista() {
        initComponents();
        this.setLocationRelativeTo(null);
        sliderPosX.disable();
        sliderPosY.disable();
        this.rbtHorizontal.setSelected(false);
        radio1 = "100";
        radio2 = "100";
        slidX = (panel.getWidth() / 2);
        slidY = panel.getHeight() / 2;
        System.out.println(panel.getHeight());
        System.out.println(panel.getWidth());
        

        radio2 = radio1;


        elipseX1 = Integer.valueOf(radio1) + slidX;
        elipseY1 = Integer.valueOf(radio2) + slidY;
        elipseX2 = -Integer.valueOf(radio1) + slidX;
        elipseY2 = -Integer.valueOf(radio2) + slidY;
        estadoLimpiar = true;
        limpieza();
        this.yyy.setVisible(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        paneldd = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        btnHiperbole = new javax.swing.JButton();
        btnLinea = new javax.swing.JButton();
        btnParabola = new javax.swing.JButton();
        btnElipse = new javax.swing.JButton();
        btnCirculo = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        btnDibujar = new principal.MaterialButtomRectangle();
        varias = new principal.MaterialButtomRectangle();
        materialButtomRectangle2 = new principal.MaterialButtomRectangle();
        jPanel2 = new javax.swing.JPanel();
        lbl2 = new javax.swing.JLabel();
        txtA = new jtextfieldround.JTextFieldRound();
        lbl1 = new javax.swing.JLabel();
        txtB = new jtextfieldround.JTextFieldRound();
        checkRelleno = new javax.swing.JCheckBox();
        btncolor = new javax.swing.JButton();
        lblOrientación1 = new javax.swing.JLabel();
        rbtHorizontal = new javax.swing.JRadioButton();
        rbtVertical = new javax.swing.JRadioButton();
        sliderGrosor = new javax.swing.JSlider();
        lblOrientación = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        sliderPosY = new javax.swing.JSlider();
        sliderPosX = new javax.swing.JSlider();
        btnBorrar = new javax.swing.JButton();
        materialButtomRectangle3 = new principal.MaterialButtomRectangle();
        materialButtomRectangle4 = new principal.MaterialButtomRectangle();
        panel = new javax.swing.JPanel();
        yyy = new javax.swing.JSlider();
        xxx = new javax.swing.JSlider();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(40, 65, 113));
        setResizable(false);
        setSize(new java.awt.Dimension(1366, 600));

        paneldd.setBackground(new java.awt.Color(52, 67, 101));
        paneldd.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Figuras", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        btnHiperbole.setBackground(new java.awt.Color(255, 255, 255));
        btnHiperbole.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnHiperbole.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/h.png"))); // NOI18N
        btnHiperbole.setText("Hiperbole");
        btnHiperbole.setBorder(null);
        btnHiperbole.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnHiperbole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHiperboleActionPerformed(evt);
            }
        });

        btnLinea.setBackground(new java.awt.Color(255, 255, 255));
        btnLinea.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Line_34554.png"))); // NOI18N
        btnLinea.setText("Linea");
        btnLinea.setBorder(null);
        btnLinea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLineaActionPerformed(evt);
            }
        });

        btnParabola.setBackground(new java.awt.Color(255, 255, 255));
        btnParabola.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnParabola.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/p3.png"))); // NOI18N
        btnParabola.setText("Parábola");
        btnParabola.setBorder(null);
        btnParabola.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnParabola.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnParabolaActionPerformed(evt);
            }
        });

        btnElipse.setBackground(new java.awt.Color(255, 255, 255));
        btnElipse.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnElipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Ellipse-tool_34550.png"))); // NOI18N
        btnElipse.setText("Elipse");
        btnElipse.setBorder(null);
        btnElipse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnElipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnElipseActionPerformed(evt);
            }
        });

        btnCirculo.setBackground(new java.awt.Color(255, 255, 255));
        btnCirculo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnCirculo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Circle_34541.png"))); // NOI18N
        btnCirculo.setText("Círculo");
        btnCirculo.setBorder(null);
        btnCirculo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCirculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCirculoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnParabola, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                    .addComponent(btnLinea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnHiperbole, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                    .addComponent(btnElipse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCirculo, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnCirculo, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                    .addComponent(btnHiperbole, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLinea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnParabola, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnElipse, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        paneldd.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 310, 170));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Acciones", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        btnDibujar.setBackground(new java.awt.Color(255, 51, 51));
        btnDibujar.setForeground(new java.awt.Color(255, 255, 255));
        btnDibujar.setText("Graficar");
        btnDibujar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnDibujar.setDefaultCapable(false);
        btnDibujar.setFocusable(false);
        btnDibujar.setFont(new java.awt.Font("Microsoft Tai Le", 1, 18)); // NOI18N
        btnDibujar.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnDibujar.setRippleColor(new java.awt.Color(255, 0, 0));
        btnDibujar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDibujarActionPerformed(evt);
            }
        });

        varias.setBackground(new java.awt.Color(0, 102, 102));
        varias.setForeground(new java.awt.Color(255, 255, 255));
        varias.setText("VARIAS FIGURAS");
        varias.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        varias.setFont(new java.awt.Font("Microsoft Tai Le", 1, 18)); // NOI18N
        varias.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                variasMouseClicked(evt);
            }
        });
        varias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                variasActionPerformed(evt);
            }
        });

        materialButtomRectangle2.setBackground(new java.awt.Color(255, 204, 51));
        materialButtomRectangle2.setForeground(new java.awt.Color(0, 102, 102));
        materialButtomRectangle2.setText("Limpiar");
        materialButtomRectangle2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        materialButtomRectangle2.setFont(new java.awt.Font("Microsoft Tai Le", 1, 18)); // NOI18N
        materialButtomRectangle2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                materialButtomRectangle2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(materialButtomRectangle2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(varias, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDibujar, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE))
                .addGap(2, 2, 2))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(btnDibujar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(varias, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(materialButtomRectangle2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        paneldd.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1290, 20, 220, 170));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Propiedades", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        lbl2.setFont(new java.awt.Font("Microsoft Tai Le", 1, 14)); // NOI18N
        lbl2.setText("Vértice:");

        txtA.setFont(new java.awt.Font("Microsoft Tai Le", 0, 12)); // NOI18N
        txtA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAKeyTyped(evt);
            }
        });

        lbl1.setFont(new java.awt.Font("Microsoft Tai Le", 1, 14)); // NOI18N
        lbl1.setText("Cruce en eje:");

        txtB.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        txtB.setFont(new java.awt.Font("Microsoft Tai Le", 0, 12)); // NOI18N
        txtB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBKeyTyped(evt);
            }
        });

        checkRelleno.setText("Relleno");
        checkRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkRellenoActionPerformed(evt);
            }
        });

        btncolor.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btncolor.setText("Color");
        btncolor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncolorActionPerformed(evt);
            }
        });

        lblOrientación1.setFont(new java.awt.Font("Microsoft Tai Le", 1, 14)); // NOI18N
        lblOrientación1.setText("Orientación");

        buttonGroup1.add(rbtHorizontal);
        rbtHorizontal.setFont(new java.awt.Font("Microsoft Tai Le", 1, 11)); // NOI18N
        rbtHorizontal.setText("Horizontal");
        rbtHorizontal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtHorizontalActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbtVertical);
        rbtVertical.setFont(new java.awt.Font("Microsoft Tai Le", 1, 11)); // NOI18N
        rbtVertical.setSelected(true);
        rbtVertical.setText("Vertical");
        rbtVertical.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtVerticalActionPerformed(evt);
            }
        });

        sliderGrosor.setForeground(new java.awt.Color(0, 0, 0));
        sliderGrosor.setMajorTickSpacing(3);
        sliderGrosor.setMaximum(20);
        sliderGrosor.setMinimum(2);
        sliderGrosor.setPaintLabels(true);
        sliderGrosor.setPaintTicks(true);
        sliderGrosor.setToolTipText("");
        sliderGrosor.setValue(2);
        sliderGrosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGrosorStateChanged(evt);
            }
        });
        sliderGrosor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                sliderGrosorMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sliderGrosorMouseReleased(evt);
            }
        });

        lblOrientación.setFont(new java.awt.Font("Microsoft Tai Le", 1, 14)); // NOI18N
        lblOrientación.setText("Grosor");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(lbl2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lbl1))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtA, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtB, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(2, 2, 2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(checkRelleno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btncolor, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblOrientación)
                        .addGap(116, 116, 116))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(rbtHorizontal, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rbtVertical))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(91, 91, 91)
                                .addComponent(lblOrientación1))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sliderGrosor, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(26, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl2)
                    .addComponent(lbl1)
                    .addComponent(lblOrientación1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbtHorizontal)
                    .addComponent(rbtVertical))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblOrientación)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sliderGrosor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(btncolor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(checkRelleno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(60, 60, 60))
        );

        paneldd.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 20, 480, 170));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Herramientas", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Desplazamientos");

        sliderPosY.setFont(new java.awt.Font("Microsoft Tai Le", 0, 11)); // NOI18N
        sliderPosY.setForeground(new java.awt.Color(0, 51, 51));
        sliderPosY.setMajorTickSpacing(50);
        sliderPosY.setMaximum(472);
        sliderPosY.setMinimum(-60);
        sliderPosY.setMinorTickSpacing(50);
        sliderPosY.setOrientation(javax.swing.JSlider.VERTICAL);
        sliderPosY.setPaintLabels(true);
        sliderPosY.setPaintTicks(true);
        sliderPosY.setToolTipText("");
        sliderPosY.setValue(186);
        sliderPosY.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderPosYStateChanged(evt);
            }
        });
        sliderPosY.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                sliderPosYMouseDragged(evt);
            }
        });
        sliderPosY.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sliderPosYMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                sliderPosYMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sliderPosYMouseReleased(evt);
            }
        });

        sliderPosX.setFont(new java.awt.Font("Microsoft Tai Le", 0, 11)); // NOI18N
        sliderPosX.setForeground(new java.awt.Color(0, 51, 51));
        sliderPosX.setMajorTickSpacing(100);
        sliderPosX.setMaximum(1300);
        sliderPosX.setMinorTickSpacing(50);
        sliderPosX.setPaintLabels(true);
        sliderPosX.setPaintTicks(true);
        sliderPosX.setToolTipText("");
        sliderPosX.setValue(508);
        sliderPosX.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        sliderPosX.setFocusCycleRoot(true);
        sliderPosX.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderPosXStateChanged(evt);
            }
        });
        sliderPosX.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                sliderPosXMouseDragged(evt);
            }
        });
        sliderPosX.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sliderPosXMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                sliderPosXMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sliderPosXMouseReleased(evt);
            }
        });

        btnBorrar.setBackground(new java.awt.Color(255, 255, 255));
        btnBorrar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/borrador.png"))); // NOI18N
        btnBorrar.setText("Borrar");
        btnBorrar.setBorder(null);
        btnBorrar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        materialButtomRectangle3.setBackground(new java.awt.Color(204, 204, 204));
        materialButtomRectangle3.setForeground(new java.awt.Color(0, 51, 51));
        materialButtomRectangle3.setText("INVERTIR Y");
        materialButtomRectangle3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        materialButtomRectangle3.setFont(new java.awt.Font("Microsoft Tai Le", 1, 14)); // NOI18N
        materialButtomRectangle3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                materialButtomRectangle3ActionPerformed(evt);
            }
        });

        materialButtomRectangle4.setBackground(new java.awt.Color(204, 204, 204));
        materialButtomRectangle4.setForeground(new java.awt.Color(0, 51, 51));
        materialButtomRectangle4.setText("Invertir X");
        materialButtomRectangle4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        materialButtomRectangle4.setFont(new java.awt.Font("Microsoft Tai Le", 1, 14)); // NOI18N
        materialButtomRectangle4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                materialButtomRectangle4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sliderPosX, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(btnBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(materialButtomRectangle3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(materialButtomRectangle4, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addGap(91, 91, 91)))
                .addComponent(sliderPosY, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel4)
                        .addGap(1, 1, 1)
                        .addComponent(sliderPosX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(materialButtomRectangle3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(materialButtomRectangle4, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(sliderPosY, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        paneldd.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 20, 450, 170));

        panel.setBackground(new java.awt.Color(255, 255, 255));
        panel.setForeground(new java.awt.Color(255, 255, 255));
        panel.setAutoscrolls(true);
        panel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                panelMouseDragged(evt);
            }
        });
        panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                panelMousePressed(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1450, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 701, Short.MAX_VALUE)
        );

        yyy.setMajorTickSpacing(50);
        yyy.setMaximum(800);
        yyy.setMinimum(1);
        yyy.setMinorTickSpacing(50);
        yyy.setOrientation(javax.swing.JSlider.VERTICAL);
        yyy.setPaintLabels(true);
        yyy.setPaintTicks(true);
        yyy.setValue(5);
        yyy.setInverted(true);
        yyy.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
                yyyAncestorMoved(evt);
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                yyyAncestorRemoved(evt);
            }
        });
        yyy.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                yyyStateChanged(evt);
            }
        });

        xxx.setMajorTickSpacing(50);
        xxx.setMaximum(1450);
        xxx.setMinimum(1);
        xxx.setMinorTickSpacing(50);
        xxx.setPaintLabels(true);
        xxx.setPaintTicks(true);
        xxx.setValue(1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(yyy, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(xxx, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(paneldd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paneldd, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(xxx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(yyy, javax.swing.GroupLayout.PREFERRED_SIZE, 754, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtBKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBKeyTyped
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            evt.consume();
        }
        if (c == KeyEvent.VK_ENTER || c == KeyEvent.VK_TAB) {
            txtA.requestFocus();
        }
    }//GEN-LAST:event_txtBKeyTyped

    private void txtAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAKeyTyped
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            evt.consume();
        }
        if (c == KeyEvent.VK_ENTER || c == KeyEvent.VK_TAB) {
            this.btnDibujar.doClick();
        }
    }//GEN-LAST:event_txtAKeyTyped

    private void materialButtomRectangle2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_materialButtomRectangle2ActionPerformed
        limpieza();
        one = 0;
        
    }//GEN-LAST:event_materialButtomRectangle2ActionPerformed

    private void calculosElipse() {
        
       
         int h, k;
        float a, b;
        h = (elipseX1 + elipseX2) / 2;
        k = (elipseY1 + elipseY2) / 2;
        a = (float) Math.sqrt(Math.pow(elipseX1 - elipseX2, 2)) / 2;
        b = (float) Math.sqrt(Math.pow(elipseY1 - elipseY2, 2)) / 2;
        if (!checkRelleno.isSelected()) {
            elipse(h, k, a, b);
        } else {
            elipseRellena(h, k, a, b);
        }

    }

    
    public void elipseRellena(int h, int k, float a, float b) {
        float y, x;
        int tam = (int) Math.max(a, b);
        grosor = 10;
        if (a < 40 || b < 40) {
            grosor = 1;
        }

        x = h - a;
        do {
            y = (float) (b * Math.sqrt(1 - Math.pow(x - h, 2) / Math.pow(a, 2)) + k);
            pintar_pixel(Math.round(x), Math.round(y));
            y = (float) (-b * Math.sqrt(1 - Math.pow(x - h, 2) / Math.pow(a, 2)) + k);
            pintar_pixel(Math.round(x), Math.round(y));
            x = x + 1;
        } while (x < h + a);

        y = k - b;
        do {
            x = (float) (a * Math.sqrt(1 - Math.pow(y - k, 2) / Math.pow(b, 2)) + h);

            linea(Math.round(x), Math.round(y), Math.round(h - (x - h)), Math.round(y),true);
            y = y + grosor;
        } while (y < k + b);

    }
        
    
        public void linea(int xInicial, int yInicial, int xFinal, int yFinal,boolean b) {
        //INICIO DEL ALGORITMO

//        DeltaX = (Integer.parseInt(Xfinal.getText())-Integer.parseInt(Xinicial.getText()));
//        DeltaY = (Integer.parseInt(Yfinal.getText())-Integer.parseInt(Yinicial.getText()));
        DeltaX = xFinal - xInicial;
        DeltaY = yFinal - yInicial;

        if (Math.abs(DeltaX) > Math.abs(DeltaY)) {
            Pasos = (int) Math.abs(DeltaX);

        } else {
            Pasos = (int) Math.abs(DeltaY);

        }

        Xincremento = DeltaX / Pasos;
        Yincremento = DeltaY / Pasos;
        // X=(float)(Integer.parseInt(Xinicial.getText()));
        //Y=(float)(Integer.parseInt(Yinicial.getText()));
        X = (float) xInicial;
        Y = (float) yInicial;

        xp = (int) X;
        yp = (int) Y;

        // pintar_pixel((xp*TP)+25,(yp*TP)+60);}
        if(b==true){
        pintar_pixel(xp, yp);
        }else{
        pintar_pixel(xp, yp, Color.WHITE);
        }
        xp = 0;
        yp = 0;

        K = 0;

        while (K < Pasos) {
            K = K + 1;
            X = X + Xincremento;
            Y = Y + Yincremento;

            xp = Math.round(X);
            yp = Math.round(Y);

            // pintar_pixel((xp*TP)+25,(yp*TP)+60);
             if(b==true){
        pintar_pixel(xp, yp);
        }else{
        pintar_pixel(xp, yp, Color.WHITE);
        }

            xp = 0;
            yp = 0;
        }
    }
        
    public void elipse(int c, int d, float a, float b) {

        float au=0;
        float y, x;
        y = d - b;
        do {
            x = (float) (a * Math.sqrt(1 - Math.pow(y - d, 2) / Math.pow(b, 2)) + c);
            au=x;
            pintar_pixel(Math.round(x), Math.round(y));
            x = (float) (-a * Math.sqrt(1 - Math.pow(y - d, 2) / Math.pow(b, 2)) + c);
            pintar_pixel(Math.round(x), Math.round(y));
            y++;
        } while (y < d + b);

        x = c - a;
        while (x < c + a) {
            y = (float) (b * Math.sqrt(1 - Math.pow(x - c, 2) / Math.pow(a, 2)) + d);
            pintar_pixel(Math.round(x), Math.round(y));
            y = (float) (-b * Math.sqrt(1 - Math.pow(x - c, 2) / Math.pow(a, 2)) + d);
            pintar_pixel(Math.round(x), Math.round(y));
            x++;
        }

    }

    private void rbtHorizontalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtHorizontalActionPerformed
        if (figura.equals("Parábola") && this.rbtHorizontal.isSelected()) {
       
       
        }
          if (figura.equals("Elipse") && this.rbtHorizontal.isSelected()) {
       
       
        }


    }//GEN-LAST:event_rbtHorizontalActionPerformed

    private void rbtVerticalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtVerticalActionPerformed
        if (figura.equals("Parábola")&&this.rbtVertical.isSelected()) {
         
            
        }
           if (figura.equals("Elipse") && this.rbtHorizontal.isSelected()) {
       
       
        }
    }//GEN-LAST:event_rbtVerticalActionPerformed

    private void sliderPosYStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderPosYStateChanged

    }//GEN-LAST:event_sliderPosYStateChanged

    private void sliderPosYMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderPosYMousePressed

        if(var==true){
       panel.repaint();}
    }//GEN-LAST:event_sliderPosYMousePressed

    private void sliderPosYMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderPosYMouseClicked


    }//GEN-LAST:event_sliderPosYMouseClicked

    private void sliderPosYMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderPosYMouseReleased
        //panel.repaint();
        estadoLimpiar = false;
           if(var==true){
           btnDibujar.doClick();}
    }//GEN-LAST:event_sliderPosYMouseReleased

    private void sliderPosYMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderPosYMouseDragged
        // TODO add your handling code here:
        // panel.repaint();
    }//GEN-LAST:event_sliderPosYMouseDragged

    private void sliderPosXStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderPosXStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_sliderPosXStateChanged

    private void sliderPosXMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderPosXMouseDragged
        // TODO add your handling code here:
    }//GEN-LAST:event_sliderPosXMouseDragged

    private void sliderPosXMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderPosXMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_sliderPosXMouseClicked

    private void sliderPosXMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderPosXMousePressed
        
        if(var==true){panel.repaint();}
    }//GEN-LAST:event_sliderPosXMousePressed

    private void sliderPosXMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderPosXMouseReleased
        // TODO add your handling code here:
         estadoLimpiar = false;
           if(var==true){
           btnDibujar.doClick();}
    }//GEN-LAST:event_sliderPosXMouseReleased

    private void btnElipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnElipseActionPerformed

        figura = "Elipse";
        btnElipse.setEnabled(false);
        botones();
    }//GEN-LAST:event_btnElipseActionPerformed

    private void btnParabolaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnParabolaActionPerformed
        // TODO add your handling code here:

        figura = "Parábola";

        btnParabola.setEnabled(false);;
        botones();
    }//GEN-LAST:event_btnParabolaActionPerformed

    private void btnCirculoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCirculoActionPerformed
        // TODO add your handling code here:

        figura = "Círculo";
        botones();

    }//GEN-LAST:event_btnCirculoActionPerformed
    public void iniciar() {
        elipseX1 = Integer.valueOf(radio2) + slidX;
        elipseY1 = Integer.valueOf(radio1) + slidY;
        elipseX2 = -Integer.valueOf(radio2) + slidX;
        elipseY2 = -Integer.valueOf(radio1) + slidY;
    }
    private void btnDibujarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDibujarActionPerformed


        grosor = sliderGrosor.getValue();
   
     
     yy=yyy.getValue();
     xx=xxx.getValue();
        System.out.println(this.sliderPosX.getValue());
        System.out.println(this.sliderPosY.getValue());
        
        if (figura.equals("Parábola")) {

            if (!this.txtA.getText().isEmpty() && !this.txtB.getText().isEmpty()) {
                  
            
       
//                
                if (estadoLimpiar == false) {
                    
             
                    
                    caja1 = Integer.valueOf(txtB.getText());
                    caja2 = Integer.valueOf(txtA.getText());

                 
                        slidX = sliderPosX.getValue();
                        slidY = sliderPosY.getValue();
                        if (this.rbtVertical.isSelected()) {
                            h = slidX;
                            k = this.sliderPosY.getMaximum() - slidY;
                            slidY = caja1;

                        } else {
                            h = slidX;
                            k = (this.sliderPosY.getMaximum() - slidY);
                        }
                    
                    if (this.rbtVertical.isSelected() && caja2 >= 0 && caja1 >= 0) {
                        limX = h;
                        lim = k + 1000;
                        calcularParabola();
                        parabola(h, k - caja1, p + (int) Math.sqrt(caja2), op, oa, lim);

                    } else if (this.rbtVertical.isSelected() && caja2 < 0 && caja1 >= 0) {

                        limX = h;
                        lim = 0;
                        calcularParabola();
                        parabola(h, k - caja1, p + (int) Math.sqrt(-1 * caja2), op, oa, lim);

                    } else if (this.rbtVertical.isSelected() && caja2 < 0 && caja1 < 0) {

                        limX = h;
                        lim = 10000;
                        calcularParabola();
                        parabola(h, k - caja1, p + (int) Math.sqrt(-1 * caja2), op, oa, lim);
                    } else if (this.rbtVertical.isSelected() && caja2 >= 0 && caja1 < 0) {

                        limX = h;
                        lim = 0;
                        calcularParabola();
                        parabola(h, k - caja1, p + (int) Math.sqrt(caja2), op, oa, lim);
                    } else if (this.rbtHorizontal.isSelected() && caja2 >= 0 && caja1 >= 0) {
                        limX = 0;
                        lim = k;
                        calcularParabola();
                        parabola(h + caja2, k, p + (int) Math.sqrt(caja1), op, oa, lim);

                    } else if (this.rbtHorizontal.isSelected() && caja2 < 0 && caja1 >= 0) {

                        limX = 10000;
                        lim = k;
                        calcularParabola();
                        parabola(h + caja2, k, p + (int) Math.sqrt(caja1), op, oa, lim);

                    } else if (this.rbtHorizontal.isSelected() && caja2 < 0 && caja1 < 0) {

                        limX = 0;
                        lim = k;
                        calcularParabola();
                        parabola(h + caja2, k, p + (int) Math.sqrt(-1 * caja1), op, oa, lim);

                    } else if (this.rbtHorizontal.isSelected() && caja2 >= 0 && caja1 < 0) {

                        limX = 10000;
                        lim = k;
                        calcularParabola();
                        parabola(h + caja2, k, p + (int) Math.sqrt(-1 * caja1), op, oa, lim);

                    }
                    ejecucion++;
                    if(var==true){
                       estadoLimpiar = true;}
                } else {
                    JOptionPane.showMessageDialog(null, "Limpie el área");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Campos vacíos");
            }

        } else if (figura.equals("Círculo") || figura.equals("Elipse") || figura.equals("hiperbole")) {

            if (!this.txtA.getText().isEmpty()) {
                 if (estadoLimpiar == false) {
//                    if (!this.txtB.getText().isEmpty()) {
//                        if (Integer.valueOf(this.txtA.getText()) > Integer.valueOf(this.txtB.getText()) && figura.equals("Elipse")) {
//                            String aux = this.txtA.getText();
//                            elipseX1 = Integer.valueOf(this.txtB.getText()) + slidX;
//                            elipseY1 = Integer.valueOf(this.txtA.getText()) + slidY;
//                            elipseX2 = -Integer.valueOf(this.txtB.getText()) + slidX;
//                            elipseY2 = -Integer.valueOf(this.txtA.getText()) + slidY;
//                            txtA.setText(this.txtB.getText());
//                            txtB.setText(aux);
//                        }
//                    }

//                    if (ejecucion == 0) {

                        radio2 = this.txtB.getText();
                        radio1 = this.txtA.getText();
                        slidX = (panel.getWidth() / 2);
                        slidY = panel.getHeight() / 2;
                        if (this.figura.equals("Círculo")) {
                            radio2 = radio1;

                            
                            
                        } 
//                    } else {

                        slidX = sliderPosX.getValue(); //* 6;
                        slidY = (sliderPosY.getMaximum() - sliderPosY.getValue()); //* 3;

                        if (this.figura.equals("Círculo")) {
                            
                            radio2 = radio1;
                        } else {
                            if (this.figura.equals("Elipse")) {
                                radio2 = this.txtB.getText();
                        radio1 = this.txtA.getText();
                            }
                        }
//                    }

                    elipseX1 = Integer.valueOf(radio1) + slidX;
                    elipseY1 = Integer.valueOf(radio2) + slidY;
                    elipseX2 = -Integer.valueOf(radio1) + slidX;
                    elipseY2 = -Integer.valueOf(radio2) + slidY;

//                    if (Integer.valueOf(radio1) > Integer.valueOf(radio2)) {
//                        String aux = radio1;
//                        elipseX1 = Integer.valueOf(radio2) + slidX;
//                        elipseY1 = Integer.valueOf(radio1) + slidY;
//                        elipseX2 = -Integer.valueOf(radio2) + slidX;
//                        elipseY2 = -Integer.valueOf(radio1) + slidY;
//                        txtA.setText(radio2);
//                        txtB.setText(aux);
//                    }

                    if (this.rbtHorizontal.isSelected()) {
                        elipseX1 = Integer.valueOf(radio2) + slidX;
                        elipseY1 = Integer.valueOf(radio1) + slidY;
                        elipseX2 = -Integer.valueOf(radio2) + slidX;
                        elipseY2 = -Integer.valueOf(radio1) + slidY;
                    }

                    if(figura.equals("hiperbole") &&Integer.valueOf(txtA.getText())>0&&Integer.valueOf(txtB.getText())>=0 && this.rbtVertical.isSelected() ){
                            if (ejecucion == 0) {
                        h = panel.getWidth() / 2;
                        k = panel.getHeight() / 2;
                    } else {
                        slidX = sliderPosX.getValue();
                        slidY = sliderPosY.getValue();
                        if (this.rbtVertical.isSelected()) {
                            h = slidX;
                            k = this.sliderPosY.getMaximum() - slidY;
                            slidY = caja1;

                        } else {
                            h = slidX;
                            k = (this.sliderPosY.getMaximum() - slidY);
                        }
                    }
                        limX = h;
                        lim = k + 1000;
                        calcularParabola();
                        parabola(h, k + Integer.valueOf((txtB.getText())), p + (int)(Integer.valueOf(txtA.getText())*5), op, oa, lim);
                       limX = h;
                        lim = 0;
                        
                        calcularParabola();
                        parabola(h, k - Integer.valueOf((txtB.getText())), p + (int) (Integer.valueOf(txtA.getText())*5), op, oa, lim);
                    }
                    
                    
                    
                    //_____________________
                    
                    
                    if(figura.equals("hiperbole")&&Integer.valueOf(txtA.getText())>=0&&Integer.valueOf(txtB.getText())>0 && this.rbtHorizontal.isSelected()){
                            if (ejecucion == 0) {
                        h = panel.getWidth() / 2;
                        k = panel.getHeight() / 2;
                    } else {
                        slidX = sliderPosX.getValue();
                        slidY = sliderPosY.getValue();
                        if (this.rbtVertical.isSelected()) {
                            h = slidX;
                            k = this.sliderPosY.getMaximum() - slidY;
                            slidY = caja1;

                        } else {
                            h = slidX;
                            k = (this.sliderPosY.getMaximum() - slidY);
                        }
                    }
                        limX = 0;
                        lim = k;
                        calcularParabola();
                        parabola(h - Integer.valueOf((txtA.getText())), k,  p + (int)(Integer.valueOf(txtB.getText())*5), op, oa, lim);
                        
                         limX = 10000;
                        lim = k;
                        calcularParabola();
                        parabola(h+Integer.valueOf((txtA.getText())), k , p +  (int)(Integer.valueOf(txtB.getText())*5), op, oa, lim);
                        
                    }
                    
                    
                    //_____________________________________________________***************
                    
                    
//                     if(figura.equals("Elipse") &&Integer.valueOf(txtA.getText())<0&&Integer.valueOf(txtB.getText())>=0){
//                            if (ejecucion == 0) {
//                        h = panel.getWidth() / 2;
//                        k = panel.getHeight() / 2;
//                    } else {
//                        slidX = sliderPosX.getValue();
//                        slidY = sliderPosY.getValue();
//                        if (this.rbtVertical.isSelected()) {
//                            h = slidX;
//                            k = this.sliderPosY.getMaximum() - slidY;
//                            slidY = caja1;
//
//                        } else {
//                            h = slidX;
//                            k = (this.sliderPosY.getMaximum() - slidY);
//                        }
//                    }
//                        limX = h;
//                        lim = k + 1000;
//                        calcularParabola();
//                        parabola(h, k + Integer.valueOf((txtB.getText())), p + (int)(Integer.valueOf(txtA.getText())*-5), op, oa, lim);
//                       limX = h;
//                        lim = 0;
//                        
//                        calcularParabola();
//                        parabola(h, k - Integer.valueOf((txtB.getText())), p + (int) (Integer.valueOf(txtA.getText())*-5), op, oa, lim);
//                    }
//                    
                    
                    
                    //_____________________
                    
                    
//                    if(figura.equals("Elipse")&&Integer.valueOf(txtA.getText())>=0&&Integer.valueOf(txtB.getText())<0){
//                            if (ejecucion == 0) {
//                        h = panel.getWidth() / 2;
//                        k = panel.getHeight() / 2;
//                    } else {
//                        slidX = sliderPosX.getValue();
//                        slidY = sliderPosY.getValue();
//                        if (this.rbtVertical.isSelected()) {
//                            h = slidX;
//                            k = this.sliderPosY.getMaximum() - slidY;
//                            slidY = caja1;
//
//                        } else {
//                            h = slidX;
//                            k = (this.sliderPosY.getMaximum() - slidY);
//                        }
//                    }
//                        limX = 0;
//                        lim = k;
//                        calcularParabola();
//                        parabola(h - Integer.valueOf((txtA.getText())), k,  p + (int)(Integer.valueOf(txtB.getText())*-5), op, oa, lim);
//                        
//                         limX = 10000;
//                        lim = k;
//                        calcularParabola();
//                        parabola(h+Integer.valueOf((txtA.getText())), k , p +  (int)(Integer.valueOf(txtB.getText())*-5), op, oa, lim);
//                        
//                    }
                    
                    
                    
                    
                    
                    if(figura.equals("Círculo")){
                    calculosElipse();
                    }
                    
                    if(figura.equals("Elipse")&&Integer.valueOf(txtA.getText())>=0&&Integer.valueOf(txtB.getText())>=0){
                    calculosElipse();
                    }
                    ejecucion++;
                    
                    if(var==true){
                            estadoLimpiar = true;}

                } else {
                    JOptionPane.showMessageDialog(null, "Limpie el área");
                }

            } else {
                JOptionPane.showMessageDialog(null, "Campos vacíos");
            }

        } else if (figura.equals("Linea")) {
             if (estadoLimpiar == false) {
            if (!this.txtA.getText().isEmpty() && !this.txtB.getText().isEmpty()) {

            
            if(figura.equals("Linea")&&Integer.valueOf(txtA.getText())>=0&&Integer.valueOf(txtB.getText())>=0){
            if (one == 0) {
                sliderPosX.setValue(Integer.valueOf(txtA.getText()));
                sliderPosY.setValue(Integer.valueOf(txtB.getText()));
            }
            one++;
            linea(panel.getWidth() / 2,panel.getHeight() / 2- sliderPosY.getValue(), sliderPosX.getValue()+panel.getWidth() / 2, panel.getHeight() / 2);
            linea(sliderPosX.getValue()+panel.getWidth() / 2, panel.getHeight() / 2, panel.getWidth() / 2,panel.getHeight() / 2- sliderPosY.getValue());
            }else
                if(figura.equals("Linea")&&Integer.valueOf(txtA.getText())<0&&Integer.valueOf(txtB.getText())>=0){
            if (one == 0) {
                sliderPosX.setValue(Integer.valueOf(txtA.getText())*-1);
                sliderPosY.setValue(Integer.valueOf(txtB.getText()));
            }
            one++;
            linea(panel.getWidth() / 2,panel.getHeight() / 2- sliderPosY.getValue(), panel.getWidth() / 2-sliderPosX.getValue(), panel.getHeight() / 2);
            linea( panel.getWidth() / 2-sliderPosX.getValue(), panel.getHeight() / 2, panel.getWidth() / 2,panel.getHeight() / 2- sliderPosY.getValue());
            }else 
                if(figura.equals("Linea")&&Integer.valueOf(txtA.getText())<0&&Integer.valueOf(txtB.getText())<0){
            if (one == 0) {
                sliderPosX.setValue(Integer.valueOf(txtA.getText())*-1);
                sliderPosY.setValue(Integer.valueOf(txtB.getText())*-1);
            }
            one++;
            linea(panel.getWidth() / 2,panel.getHeight() / 2+ sliderPosY.getValue(), panel.getWidth() / 2-sliderPosX.getValue(), panel.getHeight() / 2);
            linea( panel.getWidth() / 2-sliderPosX.getValue(), panel.getHeight() / 2, panel.getWidth() / 2,panel.getHeight() / 2+ sliderPosY.getValue());
            }
            
            
            if(var==true){
                   estadoLimpiar = true;}
            }else {
            JOptionPane.showMessageDialog(null, "Campos vacíos");
        }
             }else {
                    JOptionPane.showMessageDialog(null, "Limpie el área");
                }
            
        } else {
            JOptionPane.showMessageDialog(null, "Campos vacíos");
        }


    }//GEN-LAST:event_btnDibujarActionPerformed

    private void btnLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLineaActionPerformed
        // TODO add your handling code here:
        figura = "Linea";
        btnLinea.setEnabled(false);
        botones();
    }//GEN-LAST:event_btnLineaActionPerformed

    private void materialButtomRectangle3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_materialButtomRectangle3ActionPerformed
        // TODO add your handling code here:
        if(tf==0){
        this.yyy.setInverted(false);
        tf++;
        }
        else{
        this.yyy.setInverted(true);
        tf=0;
        }
    }//GEN-LAST:event_materialButtomRectangle3ActionPerformed

    private void materialButtomRectangle4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_materialButtomRectangle4ActionPerformed
        // TODO add your handling code here:
        if(tf2==0){
        this.xxx.setInverted(true);
        tf2++;
        }
        else{
        this.xxx.setInverted(false);
        tf2=0;
        }
    }//GEN-LAST:event_materialButtomRectangle4ActionPerformed

    private void yyyAncestorMoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_yyyAncestorMoved
        // TODO add your handling code here:
        
    }//GEN-LAST:event_yyyAncestorMoved

    private void yyyAncestorRemoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_yyyAncestorRemoved
        // TODO add your handling code here:
    }//GEN-LAST:event_yyyAncestorRemoved

    private void yyyStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_yyyStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_yyyStateChanged

    private void sliderGrosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGrosorStateChanged
        // TODO add your handling code here:
        grosor = sliderGrosor.getValue();
    }//GEN-LAST:event_sliderGrosorStateChanged

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        // TODO add your handling code here:
        figura = "Borrar";
        botones();
        Cursor(figura);
    }//GEN-LAST:event_btnBorrarActionPerformed

    private void panelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelMousePressed
         //TODO add your handling code here:
         
           if (figura.equals("Borrar")) {
            borrarx = evt.getX();
            borrary = evt.getY();
            pintar_pixel(borrarx, borrary, Color.white);
        }
    }//GEN-LAST:event_panelMousePressed

    
       public void pintar_pixel(int x, int y, Color colo) {

        Graphics g = panel.getGraphics();

        g.setColor(colo);
        g.fillRect(x, y, grosor, grosor);

    }
    private void panelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelMouseDragged
        // TODO add your handling code here:
         //Mano alzada
        if (figura.equals("Borrar")) {

            borrarx = evt.getX();
            borrary = evt.getY();
            
            pintar_pixel(borrarx, borrary, Color.white);
//            color = panel.getBackground();
        }
//        } else if (figura.equals("manoAlzada")) {
//            x2 = x1;
//            y2 = y1;
//            x1 = evt.getX();
//            y1 = evt.getY();
//            linea(x1, y1, x2, y2,true);
//             repaint();
//        }

    }//GEN-LAST:event_panelMouseDragged

    private void btncolorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncolorActionPerformed
        // TODO add your handling code here:
        JColorChooser ventanColor = new JColorChooser();
        color = ventanColor.showDialog(null, "Selecciona un color", Color.GRAY);
        btncolor.setBackground(color);
    }//GEN-LAST:event_btncolorActionPerformed

    private void btnHiperboleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHiperboleActionPerformed
        // TODO add your handling code here:
           figura = "hiperbole";
        botones();
    }//GEN-LAST:event_btnHiperboleActionPerformed

    private void checkRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkRellenoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkRellenoActionPerformed

    private void sliderGrosorMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderGrosorMousePressed
        // TODO add your handling code here:
             if(var==true && !figura.equals("Borrar")){
              panel.repaint();}
    }//GEN-LAST:event_sliderGrosorMousePressed

    private void sliderGrosorMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderGrosorMouseReleased
        // TODO add your handling code here:
          
           if(var==true && !figura.equals("Borrar")){
           btnDibujar.doClick();}
           
    }//GEN-LAST:event_sliderGrosorMouseReleased

    private void variasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_variasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_variasActionPerformed

    private void variasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_variasMouseClicked
        // TODO add your handling code here:
        
        if(var==true){
         estadoLimpiar = false;
         varias.setEnabled(false);
        var=false;
        }else{
       
        varias.setEnabled(true);
        var=true;
        
        
        }
    }//GEN-LAST:event_variasMouseClicked

    public void botones() {
               
        sliderPosX.enable(true);
        sliderPosY.enable(true);
             Cursor(figura);
        if (figura.equals("Círculo")) {
           
            btnCirculo.setEnabled(false); 
            lbl2.setText("Radio");
            lbl1.setText("");
            btnElipse.setEnabled(true);
            btnHiperbole.setEnabled(true);
            btnParabola.setEnabled(true);
            btnBorrar.setEnabled(true);
            btnLinea.setEnabled(true);
            txtB.setEnabled(false);
              
            
        } else if (figura.equals("hiperbole")) {
           txtB.setEnabled(true);
        btnCirculo.setEnabled(true); 
     btnHiperbole.setEnabled(false);
     if(rbtVertical.isSelected()){
            lbl2.setText("Avertura");
            lbl1.setText("Separación");}
     else{
      lbl1.setText("Avertura");
            lbl2.setText("Separación");}
     
            btnElipse.setEnabled(true);
            btnParabola.setEnabled(true);
            btnBorrar.setEnabled(true);
            btnLinea.setEnabled(true);
            
              
            
        } else if (figura.equals("Parábola")) {
    txtB.setEnabled(true);
         if(rbtVertical.isSelected()){
            lbl2.setText("Avertura");
            lbl1.setText("Inicio");}
     else{
      lbl1.setText("Avertura");
            lbl2.setText("Inicio");}
         
            btnHiperbole.setEnabled(true);
            btnElipse.setEnabled(true);
            btnCirculo.setEnabled(true);
            btnLinea.setEnabled(true);
            txtB.setEditable(true);
               btnBorrar.setEnabled(true);
            
        } else if (figura.equals("Elipse")) {
txtB.setEnabled(true);
            txtB.setEditable(true);
            lbl2.setText("Radio 1");
            lbl1.setText("Radio 2");
            btnCirculo.setEnabled(true);
            btnHiperbole.setEnabled(true);
            btnLinea.setEnabled(true);
            btnParabola.setEnabled(true);
              btnBorrar.setEnabled(true);
        
            rbtVertical.setText("Vertical");
            rbtHorizontal.setText("Horizontal");
        } else if (figura.equals("Linea")) {
            txtB.setEnabled(true);
            lbl2.setText("Intercepto X");
            lbl1.setText("Intercepto Y");
            txtB.setEditable(true);
            btnHiperbole.setEnabled(true);
               btnBorrar.setEnabled(true);
            btnCirculo.setEnabled(true);
            btnParabola.setEnabled(true);
            btnElipse.setEnabled(true);
        } else if (figura.equals("Borrar")) {
            txtB.setEnabled(true);
            btnHiperbole.setEnabled(true);
            btnBorrar.setEnabled(false);
             btnCirculo.setEnabled(true);
            btnParabola.setEnabled(true);
             btnLinea.setEnabled(true);
           btnElipse.setEnabled(true);
        }
    }

    public void opcionesParabola() {
        this.rbtHorizontal.setVisible(true);
        this.rbtVertical.setVisible(true);
        this.rbtHorizontal.setSelected(true);
        this.lbl1.setVisible(true);
        this.lbl2.setVisible(true);
        lbl1.setText("Cruce en eje:");
        lbl2.setText("Vértice:");
        lblOrientación.setVisible(true);
        this.txtB.setVisible(true);
        this.txtA.setVisible(true);
        this.txtA.setText("");
        this.txtB.setText("");

    }

    public void opcionesCirculo() {
        this.txtB.setVisible(false);
        this.txtB.setText("");
        this.txtA.setText("");
        this.txtA.setVisible(true);
        this.lblOrientación.setVisible(false);
        this.lbl1.setVisible(false);
        this.lbl2.setVisible(true);
        this.lbl2.setText("Radio:");
        this.rbtHorizontal.setVisible(false);
        this.rbtVertical.setVisible(false);
    }

    public void opcionesElipse() {
        this.txtB.setVisible(true);
        this.txtB.setText("");
        this.txtA.setVisible(true);
        this.lblOrientación.setVisible(true);
        this.txtA.setText("");
        this.lbl1.setVisible(true);
        this.lbl2.setVisible(true);
        this.lbl2.setText("Radio 2:");
        this.lbl1.setText("Radio 1:");
        this.rbtHorizontal.setVisible(true);
        this.rbtVertical.setVisible(true);
    }

    private void calcularParabola() {

        if (Math.sqrt(Math.pow(h - limX, 2)) > Math.sqrt(Math.pow(k - lim, 2))) {
            op = 1;
            lim = limX;
            if (limX >= h) {
                oa = 0;
            } else {
                oa = 1;
            }
        } else {
            op = 0;
            if (lim >= k) {
                oa = 0;
            } else {
                oa = 1;
            }

        }
    }


        
    public void parabola(int h, int k, int p, int op, int oa, int lim) {
        float x, y;
        if (oa == 1.0) {
            p = -p;
            lim = -lim;
        }
        if (op == 1.0) {
            y = h;
            x = k;
            h = k;
            k = (int) y;
        } else {
            y = k;
            x = h;
        }
        do {

            x = x + 1;
            y = (float) (Math.pow(x - h, 2) / p + k);
            y = (int) y;

            if (op == 0) {
                pintar_pixel(Math.round(x), Math.round(y));
                pintar_pixel(Math.round(h - (x - h)), Math.round(y));
            } else {
                pintar_pixel(Math.round(y), Math.round(x));
                pintar_pixel(Math.round(y), Math.round(h - (x - h)));
            }
            if (oa == 1.0) {
                y = -y;
            }
        } while (y < lim);

        lim = Math.round(y);
        y = k;
        boolean b = false;
        do {
            if (p < 0) {
                if (b) {
                    y = -y;
                    b = false;
                }
                y = y - 1;
            } else {
                y = y + 1;
            }
            x = (float) (Math.sqrt(p * (y - k)) + h);
            x = (int) x;
            if (op == 0) {
                pintar_pixel(Math.round(x), Math.round(y));
            } else {
                pintar_pixel(Math.round(y), Math.round(x));
            }

            x = (float) (-1 * Math.sqrt(p * (y - k)) + h);
            x = (int) x;
            if (op == 0) {
                pintar_pixel(Math.round(x), Math.round(y));
            } else {
                pintar_pixel(Math.round(y), Math.round(x));
            }
            if (oa == 1.0) {
                y = -y;
                b = true;
            }
        } while (y <= lim);

    }

    public void pintar_pixel(int x, int y) {

        Graphics g = panel.getGraphics();
        g.setColor(color);
        g.fillRect(x, y, grosor, grosor);
        
        if(y<yy && yyy.getInverted()==true){
        g.setColor(Color.WHITE);
        g.fillRect(x, y, grosor, grosor);
        }
        if(yyy.getInverted()==false){
            yy=820-yyy.getValue();
         
        }
        if(y>yy&&yyy.getInverted()==false){
        g.setColor(Color.WHITE);
         g.fillRect(x, y, grosor, grosor);
        }
        
            if(x<xx && xxx.getInverted()==false){
        g.setColor(Color.WHITE);
        g.fillRect(x, y, grosor, grosor);
        }
        if(xxx.getInverted()==true){
            xx=1520-xxx.getValue();
         
        }
        if(x>xx&&xxx.getInverted()==true){
        g.setColor(Color.WHITE);
        g.fillRect(x, y, grosor, grosor);
        }
       
    }
    

    public void linea(int xInicial, int yInicial, int xFinal, int yFinal) {

        DeltaX = xFinal - xInicial;
        DeltaY = yFinal - yInicial;

        if (Math.abs(DeltaX) > Math.abs(DeltaY)) {
            Pasos = (int) Math.abs(DeltaX);

        } else {
            Pasos = (int) Math.abs(DeltaY);

        }

        Xincremento = DeltaX / Pasos;
        Yincremento = DeltaY / Pasos;

        X = (float) xInicial;
        Y = (float) yInicial;

        xp = (int) X;
        yp = (int) Y;

        pintar_pixel(xp, yp);

        xp = 0;
        yp = 0;

        K = 0;

        while (K < 2000) {
            K = K + 1;
            X = X + Xincremento;
            Y = Y + Yincremento;

            xp = Math.round(X);
            yp = Math.round(Y);

            pintar_pixel(xp, yp);

            xp = 0;
            yp = 0;
        }

        mensaje++;
        sliderPosX.enable(true);
        sliderPosY.enable(true);
         if(var==true){
                   estadoLimpiar = true;
         }
        if(bandera<3){
        bandera++;}else{bandera=0;}
    }

    
    


    
    public void limpieza() {

        if (estadoLimpiar == true || var==false) {
            panel.removeAll();
            panel.repaint();
        }
        estadoLimpiar = false;
        ejecucion = 0;
        sliderPosX.setValue(655);
        sliderPosY.setValue(250);

    }
    
        public void Cursor(String texto) {
        Cursor cursor;
        ImageIcon icon;
        if (texto.equals("Borrar")) {
            icon = new ImageIcon(getClass().getResource("/imagenes/borrador.png"));

            Toolkit t = Toolkit.getDefaultToolkit();
            cursor = t.createCustomCursor(icon.getImage(), new Point(10, 31), "cursor");
            panel.setCursor(cursor);
        } else {

            panel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));

        }
      
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Vista().setVisible(true);
            }
        });

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnCirculo;
    private principal.MaterialButtomRectangle btnDibujar;
    private javax.swing.JButton btnElipse;
    private javax.swing.JButton btnHiperbole;
    private javax.swing.JButton btnLinea;
    private javax.swing.JButton btnParabola;
    private javax.swing.JButton btncolor;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox checkRelleno;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel lbl1;
    private javax.swing.JLabel lbl2;
    private javax.swing.JLabel lblOrientación;
    private javax.swing.JLabel lblOrientación1;
    private principal.MaterialButtomRectangle materialButtomRectangle2;
    private principal.MaterialButtomRectangle materialButtomRectangle3;
    private principal.MaterialButtomRectangle materialButtomRectangle4;
    private javax.swing.JPanel panel;
    private javax.swing.JPanel paneldd;
    private javax.swing.JRadioButton rbtHorizontal;
    private javax.swing.JRadioButton rbtVertical;
    private javax.swing.JSlider sliderGrosor;
    private javax.swing.JSlider sliderPosX;
    private javax.swing.JSlider sliderPosY;
    private jtextfieldround.JTextFieldRound txtA;
    private jtextfieldround.JTextFieldRound txtB;
    private principal.MaterialButtomRectangle varias;
    private javax.swing.JSlider xxx;
    private javax.swing.JSlider yyy;
    // End of variables declaration//GEN-END:variables
}
